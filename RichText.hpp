#ifndef RICHTEXT_HPP
#define RICHTEXT_HPP

//////////////////////////////////////////////////////////////////////////
// Headers
//////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics/Drawable.hpp>
#include <SFML/Graphics/Color.hpp>
#include <SFML/Graphics/Text.hpp>
#include <SFML/System/String.hpp>
#include <vector>

namespace sfe
{

class RichText : public sf::Drawable, public sf::Transformable
{
public:
  //////////////////////////////////////////////////////////////////////////
  // Typedef for collection type
  //////////////////////////////////////////////////////////////////////////
  typedef std::vector<sf::Text> collection_type;

  //////////////////////////////////////////////////////////////////////////
  // Constructor
  //////////////////////////////////////////////////////////////////////////
  RichText();

  //////////////////////////////////////////////////////////////////////////
  // Operators
  //////////////////////////////////////////////////////////////////////////
  RichText & operator << (const sf::Color &color);
  RichText & operator << (sf::Text::Style style);
  RichText & operator << (const sf::String &string);

  //////////////////////////////////////////////////////////////////////////
  // Set character size
  //////////////////////////////////////////////////////////////////////////
  void setCharacterSize(unsigned int size);

  //////////////////////////////////////////////////////////////////////////
  // Set font
  //////////////////////////////////////////////////////////////////////////
  void setFont(const sf::Font &font);

  //////////////////////////////////////////////////////////////////////////
  // Clear
  //////////////////////////////////////////////////////////////////////////
  void clear();

  //////////////////////////////////////////////////////////////////////////
  // Get text list
  //////////////////////////////////////////////////////////////////////////
  const collection_type &getTextList() const;

  //////////////////////////////////////////////////////////////////////////
  // Get character size
  //////////////////////////////////////////////////////////////////////////
  unsigned int getCharacterSize() const;

  //////////////////////////////////////////////////////////////////////////
  // Get font
  //////////////////////////////////////////////////////////////////////////
  const sf::Font & getFont() const;

  //////////////////////////////////////////////////////////////////////////
  // Get width
  //////////////////////////////////////////////////////////////////////////
  float getWidth() const;

  //////////////////////////////////////////////////////////////////////////
  // Get height
  //////////////////////////////////////////////////////////////////////////
  float getHeight() const;

private:
  //////////////////////////////////////////////////////////////////////////
  // Update size
  //////////////////////////////////////////////////////////////////////////
  void updateSize() const;

  //////////////////////////////////////////////////////////////////////////
  // Update position
  //////////////////////////////////////////////////////////////////////////
  void updatePosition() const;

  //////////////////////////////////////////////////////////////////////////
  // Render
  //////////////////////////////////////////////////////////////////////////
  void draw(sf::RenderTarget& target, sf::RenderStates states) const;

  //////////////////////////////////////////////////////////////////////////
  // Member data
  //////////////////////////////////////////////////////////////////////////
  mutable collection_type myTexts;	///< List of texts
  sf::Color myCurrentColor;							///< Last used color
  sf::Text::Style myCurrentStyle;				///< Last style used
  mutable sf::Vector2f mySize;					///< Size of the text
  mutable bool mySizeUpdated;						///< Do we need to recompute the size?
  mutable bool myPositionUpdated;				///< Do we need to recompute the
                                        ///< position?
};

}

#endif // RICHTEXT_HPP
